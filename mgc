#!/usr/bin/env ruby
# coding: utf-8
# Author: Renich Bon Ciric <renich@woralelandia.com>
# Date: 20130604
# License: GPLv3 @ http://www.gnu.org/licenses/gpl.txt
# Description: This script should let you do stuff @ MtGox; with API v2.
# Credits: nitrous_ @ irc://freenode.net/#mtgox actually made it work. Thanks a billion to him.

require 'bundler'
Bundler.require

require 'base64'
require 'getoptlong'
require 'open-uri'
require 'openssl'
require 'pp'
require 'time'
require 'zlib'

require_relative 'lib/config/config'


# settings
config      = Settings.load( 'settings.yml' )
key         = config[:general][:key]
secret      = config[:general][:secret]
base        = config[:general][:base]
debug       = config[:general][:debug]


# functions
def hmac_512( message, secret ) 
    secret  = Base64.strict_decode64( secret )
    hash    = OpenSSL::HMAC.digest( 'sha512', secret , message )
    return Base64.strict_encode64( hash )
end

def help
    puts <<EOF
MtGox CLI tool; supporting API v2. 
USAGE:
    Usage: mgc [OPTIONS]... [PATH] [< <( echo 'JSON String' ) || JSON file]

    Options:
        --help,     -h      Display help
        --verbose,  -v      Enables verbose output.


EXAMPLES:

    # get your accout unfo
    ./mgc

    # same as above
    ./mgc BTCUSD/money/info

    # create an order using merchant. Using valid JSON files is recommended.
    ./mgc money/merchant/order/create path/to/file.json

    # same as above; using a JSON string. Be very.
    ./mgc money/merchant/order/create <( echo '{"currency":"BTC","amount":1}' )


WARNING!! WARNING!! WARNING!!
THIS TOOL IS 100% UNTESTED!! USE UNDER YOUR OWN RISK!

Renich Bon Ciric <renich@woralelandia.com>
EOF

end


# Parsing
opts = GetoptLong.new(
      [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
      [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ]
)

opts.each do |opt|
    case opt
    when '--help'
        help
        exit
    when '--verbose'
        debug = true
    end
end

path        = ARGV.empty? ? 'BTCUSD/money/ticker_fast' : ARGV.shift
data        = { :tonce => ( Time.now.to_f * 1e6 ).to_i.to_s }
data        = data.merge( JSON.parse( ARGF.read ).to_hash ) unless ARGV.empty?
data_str    = URI::encode_www_form( data )
message     = path + "\0" + data_str


# Logic
req = hmac_512( message, secret )

conn = Faraday.new( :url => 'https://data.mtgox.com/api/2/' ) do |f|
    f.request  :url_encoded
    f.response :logger if debug
    f.adapter  :net_http
    f.headers['User-Agent']         = 'My First Trade Bot'
    f.headers['Rest-Key']           = key
    f.headers['Rest-Sign']          = req 
    f.headers['Accept-Encoding']    = 'gzip'
end

response = conn.post do |r|
    r.url path
    r.body = data_str
end

if debug
    puts
    puts 'Settings: '
    puts 'key: ' + key
    puts 'secret: ' + secret
    puts 'base: ' + base
    puts 'path: ' + path
    print 'data (pretty print): '
    pp data
    puts 'message: ' + message
    print 'message (pretty print): '
    pp message

    puts
    puts 'Connection headers: '
    pp conn.headers
    puts ''

    puts 'Response headers: '
    pp response.headers
    puts ''

    puts 'Response body: '
end

# TODO: handle GZIP and Non-GZIP
puts JSON.parse( Zlib::GzipReader.new( StringIO.new( response.body ), encoding: 'ASCII-8BIT' ).read ).to_json
